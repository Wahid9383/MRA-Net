import numpy as np
import torch.nn as nn
import torch
from SEModule import SEConv
import torchsummary as summary
class Conv(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=(1, 1), stride=1, padding=0, groups=1):
        super(Conv, self).__init__()
        self.conv = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size,
                                stride=stride, padding=padding, groups=groups)
        self.bn = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        x = self.relu(x)
        return x
class CRCA_Branch(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(CRCA_Branch, self).__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(in_channels=in_channels // 8, out_channels=out_channels // 8, kernel_size=3, padding='same'),
            nn.BatchNorm2d(num_features=out_channels // 8),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels=out_channels // 8, out_channels=out_channels // 8, kernel_size=3, padding='same'),
            nn.BatchNorm2d(num_features=out_channels // 8),
            nn.ReLU(inplace=True),
            SEConv(in_channels=in_channels // 8, reduced_dim=in_channels // 4),
            nn.Conv2d(in_channels=out_channels // 8, out_channels=out_channels // 8, kernel_size=3, padding='same'),
            nn.BatchNorm2d(num_features=out_channels // 8),
        )

        self.relu = nn.ReLU(inplace=True)
    def forward(self, x):

        return self.relu(x + self.conv(x))


class ReductionBlockA(nn.Module):
    def __init__(self, base_filter_num=64):
        super(ReductionBlockA, self).__init__()
        self.conv_n = Conv(in_channels=base_filter_num * 4, out_channels=384, kernel_size=(3, 3), stride=2, padding=0)
        self.conv_k = Conv(in_channels=base_filter_num * 4, out_channels=192, kernel_size=(1, 1))
        self.conv_l = Conv(in_channels=192, out_channels=192, kernel_size=(3, 3), stride=1, padding=1)
        self.conv_m = Conv(in_channels=192, out_channels=256, kernel_size=(3, 3), stride=2)
        self.maxPool = nn.MaxPool2d(kernel_size=(3, 3), stride=2)

    def forward(self, x):
        h1 = self.maxPool(x)
        h2 = self.conv_n(x)
        h3 = self.conv_k(x)
        h3 = self.conv_l(h3)
        h3 = self.conv_m(h3)
        h = torch.cat([h1, h2, h3], dim=1)
        return h

class ReductionBlockB(nn.Module):
    def __init__(self, base_filter_num=64):
        super(ReductionBlockB, self).__init__()
        self.conv_a1 = Conv(in_channels=base_filter_num*14, out_channels=base_filter_num*4, kernel_size=(1, 1))
        self.conv_a2 = Conv(in_channels=base_filter_num*4, out_channels=base_filter_num*6, kernel_size=(3, 3), stride=2)
        self.conv_b1 = Conv(in_channels=base_filter_num*14, out_channels=base_filter_num*4, kernel_size=(1, 1))
        self.conv_b2 = Conv(in_channels=base_filter_num*4, out_channels=base_filter_num*4, kernel_size=(3, 3), stride=2)
        self.conv_c1 = Conv(in_channels=base_filter_num*14, out_channels=base_filter_num*4, kernel_size=(1, 1))
        self.conv_c2 = Conv(in_channels=base_filter_num*4, out_channels=base_filter_num*4, kernel_size=(3, 3), stride=1,
                            padding=1)
        self.conv_c3 = Conv(in_channels=base_filter_num*4, out_channels=base_filter_num*4, kernel_size=(3, 3), stride=2)
        self.maxPool = nn.MaxPool2d(kernel_size=(3, 3), stride=2, padding=0)

    def forward(self, x):
        hn = self.maxPool(x)
        ha = self.conv_a1(x)
        ha = self.conv_a2(ha)

        hb = self.conv_b1(x)
        hb = self.conv_b2(hb)

        hc = self.conv_c1(x)
        hc = self.conv_c2(hc)
        hc = self.conv_c3(hc)

        h = torch.cat([hn, ha, hb, hc], dim=1)
        return h



class CRCA(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(CRCA, self).__init__()
        self.conv_1 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_2 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_3 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_4 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_5 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_6 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_7 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)
        self.conv_8 = CRCA_Branch(in_channels=in_channels, out_channels=out_channels)

    def forward(self, x):
        x = torch.chunk(x, 8, dim=1)
        x1 = self.conv_1(x[0])
        x2 = self.conv_2(x[1])
        x3 = self.conv_3(x[2])
        x4 = self.conv_4(x[3])
        x5 = self.conv_5(x[4])
        x6 = self.conv_6(x[5])
        x7 = self.conv_7(x[6])
        x8 = self.conv_8(x[7])
        x = torch.cat([x1, x2, x3, x4, x5, x6, x7, x8], dim=1)
        return x

class SpectralBranchStem(nn.Module):
    def __init__(self):
        super(SpectralBranchStem, self).__init__()
        self.conv_1 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=7, stride=2, padding=1)
        self.conv_2 = CRCA(in_channels=64, out_channels=64)
        self.conv_3 = CRCA(in_channels=64, out_channels=64)
        self.conv_4 = nn.Conv2d(in_channels=64, out_channels=256, kernel_size=3, stride=2, padding=1)
        self.conv_5 = CRCA(in_channels=256, out_channels=256)
        self.conv_6 = CRCA(in_channels=256, out_channels=256)
    def forward(self, x):
        x = self.conv_1(x)
        x = self.conv_2(x)
        x = self.conv_3(x)
        x = self.conv_4(x)
        x = self.conv_5(x)
        x = self.conv_6(x)
        return x

class CholedochModel(nn.Module):
    def __init__(self):
        super(CholedochModel, self).__init__()
        self.conv_1 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=7, stride=2, padding=1)
        self.conv_2 = CRCA(in_channels=64, out_channels=64)
        self.conv_3 = CRCA(in_channels=64, out_channels=64)
        self.conv_4 = nn.Conv2d(in_channels=64, out_channels=256, kernel_size=3, stride=2, padding=1)
        self.conv_5 = CRCA(in_channels=256, out_channels=256)
        self.conv_6 = CRCA(in_channels=256, out_channels=256)
        self.conv_7 = CRCA(in_channels=896, out_channels=896)
        self.conv_8 = CRCA(in_channels=1792, out_channels=1792)
        self.reductionA = ReductionBlockA()
        self.reductionB = ReductionBlockB()
        self.gap = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(in_features=1792, out_features=2)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        x = self.conv_1(x)
        x = self.conv_2(x)
        x = self.conv_3(x)
        x = self.conv_4(x)
        x = self.conv_5(x)
        x = self.conv_6(x)
        x = self.reductionA(x)
        x = self.conv_7(x)
        x = self.reductionB(x)
        x = self.conv_8(x)
        x = self.gap(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x



